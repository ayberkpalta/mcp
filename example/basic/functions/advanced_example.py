"""
GeliÅŸmiÅŸ MCP Agent KullanÄ±m Ã–rneÄŸi
Bu dosya size nasÄ±l kendi agent'larÄ±nÄ±zÄ± oluÅŸturacaÄŸÄ±nÄ±zÄ± gÃ¶sterir
"""

import asyncio
import time
from mcp_agent.app import MCPApp
from mcp_agent.agents.agent import Agent
from mcp_agent.workflows.llm.augmented_llm_openai import OpenAIAugmentedLLM

# Ã–zel fonksiyonlarÄ±mÄ±zÄ± import edelim
from custom_functions import (
    divide_numbers, power_numbers, factorial, 
    calculate_area_circle, fibonacci,
    reverse_string, count_words, to_uppercase
)

# Mevcut fonksiyonlar
def add_numbers(a: int, b: int) -> int:
    """Adds two numbers."""
    print(f"Math expert is adding {a} and {b}")
    return a + b

def multiply_numbers(a: int, b: int) -> int:
    """Multiplies two numbers."""
    print(f"Math expert is multiplying {a} and {b}")
    return a * b

# MCP App'i baÅŸlat
app = MCPApp(
    name="advanced_mcp_agent",
    settings=".mcp_agent.config.yaml"
)

async def advanced_example():
    """GeliÅŸmiÅŸ MCP Agent kullanÄ±m Ã¶rneÄŸi"""
    async with app.run() as agent_app:
        logger = agent_app.logger
        context = agent_app.context
        
        # 1. Matematik Agent'Ä± - TÃ¼m matematik fonksiyonlarÄ± ile
        math_agent = Agent(
            name="advanced_math_agent",
            instruction="""Sen geliÅŸmiÅŸ matematik uzmanÄ±sÄ±n. 
            Toplama, Ã§arpma, bÃ¶lme, Ã¼s alma, faktÃ¶riyel, 
            fibonacci ve daire alanÄ± hesaplama fonksiyonlarÄ±na eriÅŸimin var.
            KullanÄ±cÄ±nÄ±n isteÄŸini analiz et ve uygun fonksiyonu kullan.""",
            functions=[
                add_numbers, multiply_numbers, divide_numbers, 
                power_numbers, factorial, fibonacci, calculate_area_circle
            ],
        )
        
        # 2. String Agent'Ä± - Metin iÅŸlemleri iÃ§in
        string_agent = Agent(
            name="string_agent", 
            instruction="""Sen metin iÅŸleme uzmanÄ±sÄ±n.
            Metinleri tersine Ã§evirme, kelime sayma ve bÃ¼yÃ¼k harfe Ã§evirme 
            fonksiyonlarÄ±na eriÅŸimin var.""",
            functions=[reverse_string, count_words, to_uppercase],
        )
        
        # Matematik Agent'Ä±nÄ± test et
        async with math_agent:
            logger.info("=== MATEMATÄ°K AGENT TESTÄ° ===")
            
            llm = await math_agent.attach_llm(OpenAIAugmentedLLM)
            
            # FarklÄ± matematik iÅŸlemleri test et
            test_queries = [
                "5 ile 3'Ã¼ topla, sonucu 2 ile Ã§arp",
                "10'u 3'e bÃ¶l",
                "2'nin 8'inci kuvvetini hesapla", 
                "5'in faktÃ¶riyelini bul",
                "Fibonacci serisinin 10. elemanÄ±nÄ± hesapla",
                "YarÄ±Ã§apÄ± 5 olan dairenin alanÄ±nÄ± hesapla"
            ]
            
            for query in test_queries:
                try:
                    logger.info(f"Soru: {query}")
                    result = await llm.generate_str(message=query)
                    logger.info(f"Cevap: {result}")
                    print("-" * 50)
                except Exception as e:
                    logger.error(f"Hata: {e}")
        
        # String Agent'Ä±nÄ± test et  
        async with string_agent:
            logger.info("=== STRING AGENT TESTÄ° ===")
            
            llm = await string_agent.attach_llm(OpenAIAugmentedLLM)
            
            string_queries = [
                "Bu metni tersine Ã§evir: 'Merhaba DÃ¼nya'",
                "Bu cÃ¼mledeki kelime sayÄ±sÄ±nÄ± bul: 'Python ile MCP agent geliÅŸtiriyorum'",
                "Bu metni bÃ¼yÃ¼k harfe Ã§evir: 'mcp agent Ã§ok gÃ¼Ã§lÃ¼'"
            ]
            
            for query in string_queries:
                try:
                    logger.info(f"Soru: {query}")
                    result = await llm.generate_str(message=query)
                    logger.info(f"Cevap: {result}")
                    print("-" * 50)
                except Exception as e:
                    logger.error(f"Hata: {e}")

if __name__ == "__main__":
    print("ğŸš€ GeliÅŸmiÅŸ MCP Agent Ã¶rneÄŸi baÅŸlatÄ±lÄ±yor...")
    start = time.time()
    asyncio.run(advanced_example())
    end = time.time()
    print(f"âœ… Toplam Ã§alÄ±ÅŸma sÃ¼resi: {end - start:.2f} saniye")
